package engine.controller;

import engine.domain.AnswerResponse;
import engine.domain.Quiz;
import engine.domain.QuizCompletion;
import engine.dto.CreateQuizDto;
import engine.dto.PageResponseDto;
import engine.dto.QuizDto;
import engine.dto.SolveQuizDto;
import engine.mapper.QuizMapper;
import engine.repository.QuizCompletionRepository;
import engine.repository.QuizRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@RestController
@Validated
@RequestMapping("/api")
public class QuizController {

    private final QuizMapper quizMapper;
    private final QuizRepository quizRepository;

    private final QuizCompletionRepository quizCompletionRepository;


    public QuizController(QuizMapper quizMapper, QuizRepository quizRepository, QuizCompletionRepository quizCompletionRepository) {
        this.quizMapper = quizMapper;
        this.quizRepository = quizRepository;
        this.quizCompletionRepository = quizCompletionRepository;
    }

    @PostMapping("/quizzes")
    public ResponseEntity<QuizDto> createQuiz(@Valid @RequestBody CreateQuizDto createQuizDto, HttpServletRequest request) {
        String username = request.getUserPrincipal().getName();
        Quiz quiz = quizMapper.map(createQuizDto, 0, username); // ID will be generated by the repository
        Quiz savedQuiz = quizRepository.save(quiz);
        return ResponseEntity.status(HttpStatus.OK).body(quizMapper.map(savedQuiz));
    }

    @GetMapping("/quizzes/{id}")
    public ResponseEntity<QuizDto> getQuizById(@PathVariable long id) {
        return quizRepository.findById(id)
                .map(quizMapper::map)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }


    @GetMapping("/quizzes")
    public ResponseEntity<PageResponseDto<QuizDto>> getAllQuizzes(@RequestParam int page) {

        Page<Quiz> quizPage = quizRepository.findAll(PageRequest.of(page, 10));

        PageResponseDto<QuizDto> response = new PageResponseDto<>(
                quizPage.getTotalPages(),
                quizPage.getTotalElements(),
                quizPage.isLast(),
                quizPage.isFirst(),
                quizPage.getNumber(),
                quizPage.getNumberOfElements(),
                quizPage.getSize(),
                quizPage.isEmpty(),
                quizPage.getContent().stream()
                        .map(quizMapper::map)
                        .toList()
        );

        return ResponseEntity.ok(response);
    }


    @PostMapping("/quizzes/{id}/solve")
    public ResponseEntity<AnswerResponse> solveQuiz(
            @PathVariable long id,
            @Valid @RequestBody SolveQuizDto solveQuizDto,
            HttpServletRequest request) {

        String username;
        if (request.getUserPrincipal() != null) {
            username = request.getUserPrincipal().getName();
        } else {
            // Handle the case when the principal is null
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        Optional<Quiz> quizOptional = quizRepository.findById(id);

        if (quizOptional.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        Quiz quiz = quizOptional.get();

        List<Integer> userAnswer = solveQuizDto.getAnswer();
        List<Integer> correctAnswer = quiz.getAnswer();

        if ((userAnswer == null || userAnswer.isEmpty()) && (correctAnswer == null || correctAnswer.isEmpty())) {
            AnswerResponse answerResponse = new AnswerResponse(true, "Congratulations, you're right!");
            saveQuizCompletion(quiz, username);
            return ResponseEntity.ok(answerResponse);
        } else if (isAnswerCorrect(userAnswer, correctAnswer)) {
            AnswerResponse answerResponse = new AnswerResponse(true, "Congratulations, you're right!");
            saveQuizCompletion(quiz, username);
            return ResponseEntity.ok(answerResponse);
        } else {
            AnswerResponse answerResponse = new AnswerResponse(false, "Wrong answer! Please try again.");
            //saveQuizCompletion(quiz, username);
            return ResponseEntity.ok(answerResponse);
        }
    }

    private void saveQuizCompletion(Quiz quiz, String completedBy) {
        QuizCompletion quizCompletion = new QuizCompletion();
        quizCompletion.setCompletedBy(completedBy);
        quizCompletion.setCompletedAt(LocalDateTime.now());
        quizCompletion.setQuiz(quiz);
        quizCompletionRepository.save(quizCompletion);
    }

    @Transactional
    @DeleteMapping("/quizzes/{id}")
    public ResponseEntity<?> deleteQuiz(@PathVariable long id, HttpServletRequest request) {
        String username;
        if (request.getUserPrincipal() != null) {
            username = request.getUserPrincipal().getName();
        } else {
            // Handle the case when the principal is null
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        Optional<Quiz> optionalQuiz = quizRepository.findById(id);

        if (optionalQuiz.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Quiz not found");
        }

        Quiz quiz = optionalQuiz.get();

        if (quiz.getAuthor().equals(username)) {
            quizCompletionRepository.deleteByQuizId(id);
            quizRepository.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are not the author");
        }
    }


    private boolean isAnswerCorrect(List<Integer> userAnswer, List<Integer> correctAnswer) {
        return userAnswer != null && userAnswer.equals(correctAnswer);
    }
}